---
import { getCollection } from "astro:content";
import { AtUri } from "@atproto/api";
import { View } from "@atproto/api/dist/client/types/app/bsky/embed/video";
import type { ThreadViewPost } from "@atproto/api/dist/client/types/app/bsky/feed/defs";
import { blueskyConfig } from "../../config";
const { blueskyIdentifier } = blueskyConfig;

export async function getStaticPaths() {
	let bsky = await getCollection("bsky");
	const { blueskyIdentifier } = blueskyConfig;
	const posts = bsky
		.filter((it) => it.data.author.handle === blueskyIdentifier)
		.filter((it) => it.data.record.reply === undefined)
		.sort(
			(a, b) =>
				new Date(b.data.indexedAt).getTime() -
				new Date(a.data.indexedAt).getTime(),
		);
	return posts.map((post) => ({
		params: { slug: post.id },
		props: { post },
	}));
}

const { post } = Astro.props;

interface Tree {
	root: TreeNode;
}

interface TreeNode {
	thread: ThreadViewPost;
	createdAt: Date;
	// at://{did}/app.bsky.feed.post/{uid}
	// -> https://bsky.app/profile/{did}/post/{uid}
	uri: AtUri;
	text: string;
	children?: Array<TreeNode>;
}

interface LinkReplacement {
	byteStart: number;
	byteEnd: number;
	text: string;
}

enum markupType {
	text = 0,
	link = 1,
}

interface markup {
	type: markupType;
	payload: string;
}

function dbg(it: Object) {
	console.log(JSON.stringify(it, null, 3));
}

async function uriToHtml(uri: string): string {
	async function uriToThread(uri: string): ThreadViewPost {
		return (
			await (
				await fetch(
					`https://public.api.bsky.app/xrpc/app.bsky.feed.getPostThread?uri=${uri}&depth=1`,
				)
			).json()
		).thread;
	}

	const thread = await uriToThread(post.data.uri);

	async function threadToTreeNode(
		thread: ThreadViewPost,
	): TreeNode | undefined {
		if (thread.post.author.handle !== blueskyIdentifier) {
			return undefined;
		}

		const createdAt = new Date(thread.post.record.createdAt as string);
		const uri = new AtUri(thread.post.uri);
		const text = thread.post.record.text as string;
		let children = undefined;
		if (thread.replies !== undefined) {
			children = [];
			for (const child of thread.replies) {
				const uri = child.post.uri;
				const thread = await uriToThread(uri);
				const treeNode = await threadToTreeNode(thread);
				if (treeNode !== undefined) {
					children.push(treeNode);
				}
			}
		}

		return {
			thread: thread,
			createdAt: createdAt,
			uri: uri,
			text: text,
			children: (() => {
				if (children?.length === 0) {
					return undefined;
				}
				return children;
			})(),
		};
	}

	async function getRepliesTree(thread: ThreadViewPost): TreeNode {
		const tree = await threadToTreeNode(thread);
		if (tree === undefined) {
			throw "Root should not be undefined";
		}

		return tree;
	}

	const tree = await getRepliesTree(thread);

	function getThreadText(tree: TreeNode, arr?: markup[]): markup[] {
		let text = tree.text;
		let ret = arr ?? [];

		const links = tree.thread.post?.record?.facets?.map(
			(it) =>
				({
					byteStart: it.index.byteStart,
					byteEnd: it.index.byteEnd,
					text: it.features[0].uri,
				}) as LinkReplacement,
		);

		if (links) {
			links.forEach((link) => {
				ret.push({
					type: markupType.text,
					payload: text.slice(0, link.byteStart),
				});
				ret.push({
					type: markupType.link,
					payload: link.text,
				});
				ret.push({
					type: markupType.text,
					payload: text.slice(link.byteEnd),
				});
			});
		} else {
			ret.push({
				type: markupType.text,
				payload: text,
			});
		}
		if (tree.children !== undefined) {
			tree.children.forEach((it) => getThreadText(it, ret));
		}

		return ret;
	}

	function markupToHTML(m: markup[]): string {
		return m
			.map((it) => {
				if (it.type === markupType.text) {
					return `<p>${it.payload}</p>`;
				}
				if (it.type === markupType.link) {
					return `<a href="${it.payload}">${it.payload}</a>`;
				}
			})
			.join("<br/>");
	}

	const threadMarkup = getThreadText(tree);
	return markupToHTML(threadMarkup);
}

const threadHTML = uriToHtml(post.data.uri);
---

{
	<div set:html={threadHTML}/>
}

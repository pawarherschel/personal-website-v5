---
import MainGridLayout from '../layouts/MainGridLayout.astro'
import type { CVData } from '../types/CVMetadata'

import I18nKey from '../i18n/i18nKey'
import { i18n } from '../i18n/translation'

import { exec } from 'node:child_process'
import { access, readFile } from 'node:fs/promises'

import * as fs from 'node:fs/promises'
import * as util from 'node:util'

import toml from 'toml'

import CVEntryCard from '../components/CVEntryCard.astro'

const execPromise = util.promisify(exec)

console.log('git --version')
await execPromise('git --version')
  .then(() => {
    console.log('git is installed')
  })
  .catch(() => {
    throw new Error('git is not available')
  })

const folderExists = async path =>
  await access(path, fs.constants.F_OK)
    .then(() => {
      return true
    })
    .catch(() => {
      return false
    })

if (await folderExists('node_modules/git/typst')) {
  console.log('Pulling typst')
  const { _gitCloneOut, gitCloneErr } = await execPromise(
    'git -C node_modules/git/typst pull',
  )
  if (gitCloneErr) {
    console.error(gitCloneErr)
  }
} else {
  console.log('Cloning typst')
  const { _gitCloneOut, gitCloneErr } = await execPromise(
    'git clone https://github.com/pawarherschel/typst.git node_modules/git/typst',
  )
  if (gitCloneErr) {
    console.error(gitCloneErr)
  }
}

// const fromFolderPath = 'node_modules/git/typst/src/logos';
// const toFolderPath = 'src/assets/logos';
// if (await folderExists(fromFolderPath)) {
//   await fs.mkdir(toFolderPath, { recursive: true });
//   const files = await fs.readdir(fromFolderPath);
//   for (const file of files) {
//     await copyFile(
//       `${fromFolderPath}/${file}`,
//       `${toFolderPath}/${file}`,
//     );
//   }
// }

const sourceOfTruth = await readFile('node_modules/git/typst/SOT.toml', 'utf-8')
try {
  toml.parse(sourceOfTruth)
} catch (e) {
  console.error(
    `Parsing error on line ${e.line}, column ${e.column}: ${e.message}`,
  )
}
const parsedSOT: CVData = toml.parse(sourceOfTruth)

const {
  metadata,
  bibliography,
  education,
  projects,
  skills,
  certificates,
  publications,
  others,
} = parsedSOT

if (!metadata) {
  console.error('metadata is falsy')
  console.log("got: ")
  console.log(JSON.stringify(metadata))
}
if (!bibliography) {
  console.error('bibliography is falsy')
  console.log("got: ")
  console.log(JSON.stringify(bibliography))
}
if (!education) {
  console.error('education is falsy')
  console.log("got: ")
  console.log(JSON.stringify(education))
}
if (!projects) {
  console.error('projects is falsy')
  console.log("got: ")
  console.log(JSON.stringify(projects))
}
if (!skills) {
  console.error('skills is falsy')
  console.log("got: ")
  console.log(JSON.stringify(skills))
}
if (!certificates) {
  console.error('certificate is falsy')
  console.log("got: ")
  console.log(JSON.stringify(certificates))
}
if (!publications) {
  console.error('publications is falsy')
  console.log("got: ")
  console.log(JSON.stringify(publications))
}
if (!others) {
  console.error('others is falsy')
  console.log("got: ")
  console.log(JSON.stringify(others))
}
---

<MainGridLayout title={i18n(I18nKey.portfolio)}>
    <div class="flex w-full flex-col rounded-[var(--radius-large)] overflow-hidden relative min-h-32">
      {(projects) &&
              <div
                      class="card-base z-10 px-9 py-6 mb-6  relative w-full rounded-[var(--radius-large)] bg-[var(--card-bg)] ">
                  <h1 class="text-4xl font-bold text-90 text-[var(--text-color)] mb-4 text-center">Projects</h1>
                  <div class="h-1 w-5 bg-[var(--primary)] mx-auto rounded-full mb-2 transition"></div>
                  <div
                          class="transition flex flex-col rounded-[var(--radius-large)] bg-[var(--card-bg)] py-1 md:py-0 md:bg-transparent md:gap-4 mb-4">
                    {
                      projects.map((project) =>
                              <CVEntryCard
                                      cv_entry={project}
                              >
                              </CVEntryCard>
                      )
                    }
                  </div>
              </div>}
      {(publications) &&
              <div
                      class="card-base z-10 px-9 py-6 mb-6 relative w-full rounded-[var(--radius-large)] bg-[var(--card-bg)] ">
                  <h1 class="text-4xl font-bold text-90 text-[var(--text-color)] mb-4 text-center">Publications</h1>
                  <div class="h-1 w-5 bg-[var(--primary)] mx-auto rounded-full mb-2 transition"></div>
                  <div
                          class="transition flex flex-col rounded-[var(--radius-large)] bg-[var(--card-bg)] py-1 md:py-0 md:bg-transparent md:gap-4 mb-4">
                    {
                      publications.map((publications) =>
                              <CVEntryCard
                                      cv_entry={publications}
                              >
                              </CVEntryCard>
                      )
                    }
                  </div>
              </div>}
      {(others) &&
              <div
                      class="card-base z-10 px-9 py-6 mb-6 relative w-full rounded-[var(--radius-large)] bg-[var(--card-bg)] ">
                  <h1 class="text-4xl font-bold text-90 text-[var(--text-color)] mb-4 text-center">Others</h1>
                  <div class="h-1 w-5 bg-[var(--primary)] mx-auto rounded-full mb-2 transition"></div>
                  <div
                          class="transition flex flex-col rounded-[var(--radius-large)] bg-[var(--card-bg)] py-1 md:py-0 md:bg-transparent md:gap-4 mb-4">
                    {
                      others.map((other) =>
                              <CVEntryCard
                                      cv_entry={other}
                              >
                              </CVEntryCard>
                      )
                    }
                  </div>
              </div>}
        <div class="card-base z-10 px-9 py-6 mb-6 relative w-full rounded-[var(--radius-large)] bg-[var(--card-bg)] ">
            <h1 class="text-4xl font-bold text-90 text-[var(--text-color)] mb-4 text-center">Education</h1>
            <div class="h-1 w-5 bg-[var(--primary)] mx-auto rounded-full mb-2 transition"></div>
            <div class="transition flex flex-col rounded-[var(--radius-large)] bg-[var(--card-bg)] py-1 md:py-0 md:bg-transparent md:gap-4 mb-4">
              {
                education.map((education) =>
                        <CVEntryCard
                                cv_entry={education}
                        >
                        </CVEntryCard>
                )
              }
            </div>
        </div>
    </div>
</MainGridLayout>
---
import type { BlogComment, CommentHost } from "..";

interface Props extends CommentHost {
  articleId: string;
  kCommentInfo: Map<string, BlogComment[]>;
}

const { articleId, kCommentInfo, renderComment } = Astro.props;
const commentsRaw = kCommentInfo.get(articleId) || [];
const comments = commentsRaw.map((comment) => {
  const htmlEscape = (str: string) => {
    return str
      .replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;");
  };
  const firstLineOfComment = (id: string) => {
    const comment = commentsRaw.find((c) => c.id === id);
    if (!comment) return "";
    const content = comment.content
      .replace(/\[user:([^\]]+)\]/g, "")
      .replace(/\[comment:(\d+)\]/g, "");

    const firstLine = content.trim().split("\n")[0];
    if (firstLine && firstLine.startsWith("```")) {
      return "";
    }

    return "\n\n" + firstLine;
  };

  const makeMdQuote = (str: string) => {
    // replace newlines with markdown blockquote
    return str
      .split("\n")
      .map((line) => `> ${line}`)
      .join("\n");
  };

  comment.content = comment.content
    .replace(
      /\[user:([^\]]+)\]/g,
      (_, id) => `<userref>${htmlEscape(id)}</userref>`
    )
    .replace(
      /\[comment:(\d+)\]/g,
      (_, id) =>
        makeMdQuote(
          `<commentref>${htmlEscape(id)}</commentref>${htmlEscape(firstLineOfComment(id))}`
        ) + "\n"
    );

  return comment;
});
const userOccurrences = new Set<string>();
const addUserAnchor = (user: string) => {
  if (userOccurrences.has(user)) {
    return undefined;
  }
  userOccurrences.add(user);
  return `user-${user}`;
};
---

<style>
  #comment-form {
    display: flex;
    flex-direction: column;
    gap: 0.5em;
  }
  #comment-form textarea {
  }

  /* https://css-tricks.com/the-cleanest-trick-for-autogrowing-textareas/ */
  .grow-wrap {
    /* easy way to plop the elements on top of each other and have them both sized based on the tallest one's height */
    display: grid;
    height: fit-content;
  }
  .grow-wrap::after {
    /* Note the weird space! Needed to preventy jumpy behavior */
    content: attr(data-replicated-value) " ";

    /* This is how textarea text behaves */
    white-space: pre-wrap;

    /* Hidden from view, clicks, and screen readers */
    visibility: hidden;
  }
  .grow-wrap > textarea {
    /* You could leave this, but after a user resizes, then it ruins the auto sizing */
    resize: none;

    /* Firefox shows scrollbar on growth, you can hide like this. */
    overflow: hidden;
    box-sizing: border-box;
    /* width: 100%; */
    /* height: 1em; */
  }
  .grow-wrap > textarea,
  .grow-wrap::after {
    /* Identical styling required!! */
    border: 1px solid var(--main-color);
    border-radius: 4px;
    background-color: var(--main-bg-color);
    color: var(--main-color);
    padding: 0.3em;
    font: inherit;

    /* Place on top of each other */
    grid-area: 1 / 1 / 2 / 2;
  }
  .submit-button {
    background-color: var(--main-bg-color);
    border: 1px solid var(--main-color);
    border-radius: 4px;
    color: var(--main-color);
    padding: 0.3em 1em;
    text-align: center;
    text-decoration: none;
    font-size: 0.8rem;
    display: inline-block;
    float: right;
  }
  .submit-button:hover {
    background-color: var(--main-color);
    color: var(--main-bg-color);
  }
  .submit-button:active {
    color: rgba(var(--main-bg-color), 80%);
    background-color: rgba(var(--main-color), 80%);
  }
  .comment-input {
    background-color: var(--main-bg-color);
    border: 1px solid var(--main-color);
    border-radius: 4px;
    color: var(--main-color);
    padding: 0.3em 0.3em;
    text-decoration: none;
    font-size: 0.8rem;
    display: inline-block;
  }

  .comment-list {
    margin-top: 2em;
  }
  .comment-item {
    background-color: var(--main-bg-color);
  }

  .comment-head {
    font-size: 0.8em;
  }

  .comment-text {
    margin: 0.5em 0 0.5em 1em;
  }

  .comment-fields {
    display: flex;
    justify-content: space-between;
    flex-direction: row-reverse;
  }
  @media (max-width: 550px) {
    .comment-fields {
      flex-direction: column;
      gap: 0.5em;
    }
  }

  .comment-alt {
    font-size: 1em;
    display: inline-block;
    text-decoration: none;
  }
  .comment-alt:hover {
    text-decoration: underline;
  }

  .comment-unauthorized {
    font-size: 1em;
    margin-left: 0.5em;
    color: #c21f30;
  }

  .comment-head:focus,
  .comment-alt:focus {
    color: #f9a633;
  }
</style>
<section class="comment-region" aria-label="Comments">
  <h3>Comments</h3>
  <form
    id="comment-form"
    data-article-id={articleId}
    aria-label="Submit a Comment"
  >
    <div class="grow-wrap">
      <textarea
        name="comment"
        placeholder="Your comment in Markdown format, which will be visible after review. Your email will not be shown on the site."
        oninput="this.parentNode.dataset.replicatedValue = this.value"
        required></textarea>
    </div>
    <!-- <button type="submit">Submit</button> -->
    <div class="comment-fields">
      <input
        class="comment-input"
        type="text"
        name="email"
        placeholder="Name <mail@x.com>"
      />
      <button type="button" class="submit-button" style="flex: 0 0 auto;"
        >Submit</button
      >
    </div>

    <script>
      const form = document.getElementById("comment-form")!;
      const articleId = form.dataset.articleId!;
      const submitButton = form.querySelector(".submit-button");
      const email = form.querySelector<HTMLInputElement>(
        "input[name='email']"
      )!;

      email.value = localStorage.getItem("commentMailFrom") || "";

      form.addEventListener("submit", (event) => {
        event.preventDefault();
      });
      submitButton?.addEventListener("click", async () => {
        const textarea = form.querySelector<HTMLTextAreaElement>(
          "textarea[name='comment']"
        );

        const content = textarea!.value;
        if (!content) {
          alert("Please enter a comment");
          return;
        }

        const formData = new FormData();
        formData.append("articleId", articleId);
        formData.append("content", content);
        formData.append("email", email.value || "");

        localStorage.setItem("commentMailFrom", email.value || "");

        // todo: use fetch instead of postServer
        (window as any)
          .postServer("/article/comment", { body: formData })
          .then((response: Response) => {
            if (response) {
              alert(
                "Comment sent successfully. It will be visible after review."
              );
              textarea!.value = "";
            }
          });
      });
    </script>
  </form>
  <ol class="block-list comment-list">
    {
      comments.map((comment) => (
        <li class="comment-item">
          <div class="comment-head">
            <strong>{comment.email}</strong>
            <a
              class="comment-alt"
              href="#comment-form"
              id={addUserAnchor(comment.email)}
              onclick={`const el = document.querySelector('textarea[name=comment]'); el.value += '[user:${comment.email}] '; el.focus(); return false;`}
            >
              [@]
            </a>
            <em>
              at
              <time>{new Date(comment.createdAt).toLocaleString()}</time>
            </em>
            <a
              class="comment-alt"
              href="#comment-form"
              id={`comment-${comment.id}`}
              onclick={`const el = document.querySelector('textarea[name=comment]'); el.value += '[comment:${comment.id}]\\n[user:${comment.email}] '; el.focus(); return false;`}
            >
              [reply]
            </a>
            {!comment.authorized && (
              <span
                class="comment-unauthorized"
                title="Administrator has not yet verified this comment"
              >
                [unauthorized]
              </span>
            )}
          </div>
          <div class="comment-text" set:html={renderComment(comment.content)} />
        </li>
      ))
    }
  </ol>
</section>

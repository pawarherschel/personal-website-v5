---
import type { BlogComment, CommentHost } from "..";
const translateEn = {
  recentComments: "Recent Comments",
  on: "on",
  at: "at",
} as const;

const translates: Record<string, Record<keyof typeof translateEn, string>> = {
  zh: {
    recentComments: "最新评论",
    on: "在",
    at: "，于",
  },
  en: translateEn,
};
const locale = Astro.currentLocale || "en";
const t = (key: keyof typeof translateEn) => {
  return translates[locale][key] || translates.en[key];
};

interface Props extends CommentHost {
  kCommentList: BlogComment[];
}

const { kCommentList, renderComment } = Astro.props;
const comments = kCommentList.sort(
  (a, b) => b.createdAt.valueOf() - a.createdAt.valueOf()
);
const recent5Comments = comments.slice(0, 5);
---

<style>
  .comment-unauthorized {
    font-size: 1em;
    margin-left: 0.5em;
    color: #c21f30;
  }
</style>
<section aria-label="Recent Comments">
  <h2>{t("recentComments")}</h2>
  <ul class="block-list comments">
    {
      recent5Comments.map(async (comment) => (
        <li class="comment-item">
          <div class="comment-head">
            <strong class="name">{comment.email}</strong> {t("on")}
            <>
              <Fragment
                set:html={await Astro.slots.render("articleRef", [
                  comment.articleId,
                ])}
              />
              <em>
                {t("at")}
                <time>{new Date(comment.createdAt).toLocaleString()}</time>
              </em>
              {!comment.authorized && (
                <span
                  class="comment-unauthorized"
                  title="Administrator has not yet verified this comment"
                >
                  [unauthorized]
                </span>
              )}
            </>
          </div>
          <span class="title" set:html={renderComment(comment.content)} />
        </li>
      ))
    }
  </ul>
</section>
